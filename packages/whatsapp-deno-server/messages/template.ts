/** Copyright (c) Christian Fuss */

import { CurrencyCode, LanguageCode } from "../types.ts";
import { Document, Image, Video } from "./media.ts";

/**
 * Template content.
 *
 * For details see https://developers.facebook.com/docs/whatsapp/cloud-api/reference/messages#template-object
 */
export type Template = {
  /** Name of the template. */
  name: string;
  /** Specifies the language the template may be rendered in. */
  language: {
    /**
     * The language policy the message should follow.
     *
     * The only supported option is `deterministic`.
     * For details see https://developers.facebook.com/docs/whatsapp/api/messages/message-templates#language-policy-options
     */
    policy: "deterministic";
    /**
     * The code of the language or locale to use.
     */
    code: LanguageCode;
  };
  /**  */
  components?: Component[];
};

export interface TemplateMessage {
  type: "template";
  template: Template;
}

type Component = HeaderComponent | BodyComponent | ButtonComponent;

interface HeaderComponent {
  type: "header";
}

interface BodyComponent {
  type: "body";
  parameters: Parameter[];
}

type Parameter =
  | CurrencyParameter
  | DateTimeParameter
  | DocumentParameter
  | ImageParameter
  | TextParameter
  | VideoParameter;

interface CurrencyParameter {
  /** Describes the parameter type. */
  type: "currency";
  /** A currency object. */
  currency: Currency;
}

interface Currency {
  /** Default text if localization fails. */
  fallback_value: string;
  /** Currency code as defined in ISO 4217. */
  code: CurrencyCode;
  /** Amount multiplied by 1000. */
  amount_1000: number;
}

interface DateTimeParameter {
  /** Describes the parameter type. */
  type: "date_time";
  /** A date_time object. */
  date_time: {
    /**
     * Default text.
     *
     * We always use the fallback value, and we do not attempt to localize
     * using other optional fields.
     */
    fallback_value: string;
  };
}

interface DocumentParameter {
  /** Describes the parameter type. */
  type: "document";
  /**
   * A media object of type document.
   *
   * Only PDF documents are supported for media-based message templates.
   * Captions not supported when used in a media template.
   */
  document: Document;
}

interface ImageParameter {
  /** Describes the parameter type. */
  type: "image";
  /**
   * A media object of type image.
   *
   * Captions not supported when used in a media template.
   */
  image: Image;
}

interface TextParameter {
  /** Describes the parameter type. */
  type: "text";
  /**
   * The messageâ€™s text.
   *
   * Character limit varies based on the following included component type.
   *
   * For the header component type:
   * -  60 characters
   *
   * For the body component type:
   *   - 1024 characters if other component types are included
   *   - 32768 characters if body is the only component type included
   */
  text: string;
}

interface VideoParameter {
  /** Describes the parameter type. */
  type: "video";
  /**
   * A media object of type video.
   *
   * Captions not supported when used in a media template.
   */
  video: Video;
}

interface ButtonComponent {
  type: "button";
  /**
   * Type of button to create.
   *
   * - `quick_reply`: Refers to a previously created quick reply button that
   *   allows for the customer to return a predefined message.
   * - `url`: Refers to a previously created button that allows the customer to
   *   visit the URL generated by appending the text parameter to the
   *   predefined prefix URL in the template.
   */
  sub_type: "quick_reply" | "url";

  /**
   * Array of parameter objects with the content of the message.
   *
   * For components of type=button, see the button parameter object.
   */
  parameters: ButtonParameter[];
  /**
   * Position index of the button.
   *
   * You can have up to 3 buttons using index values of 0 to 2.
   */
  index: number;
}

type ButtonParameter = PayloadButtonParameter | TextButtonParameter;

interface PayloadButtonParameter {
  type: "payload";
  /**
   * Developer-defined payload.
   *
   * Will be returned when the button is clicked in addition to the display
   * text on the button.
   */
  payload: string;
}

interface TextButtonParameter {
  type: "text";
  /** Developer-provided suffix.
   *
   * Will be appended to the predefined prefix URL in the template.
   */
  text: string;
}
